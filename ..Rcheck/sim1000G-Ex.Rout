
R version 3.2.3 (2015-12-10) -- "Wooden Christmas-Tree"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "sim1000G"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('sim1000G')
Loading required package: hapsim
Loading required package: MASS
Loading required package: stringr
Loading required package: readr
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("computePairIBD1")
> ### * computePairIBD1
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: computePairIBD1
> ### Title: Computes pairwise IBD1 for a specific pair of individuals. See
> ###   function computePairIBD12 for description.
> ### Aliases: computePairIBD1
> 
> ### ** Examples
> 
> 
> library("sim1000G")
> 
> examples_dir = system.file("examples", package = "sim1000G")
> vcf_file = file.path(examples_dir, "region.vcf.gz")
> vcf = readVCF( vcf_file, maxNumberOfVariants = 100 ,
+                min_maf = 0.12 ,max_maf = NA)
[#.......] Reading VCF file..
Parsed with column specification:
cols(
  .default = col_character(),
  `#CHROM` = col_integer(),
  POS = col_integer(),
  QUAL = col_integer()
)
See spec(...) for full column specifications.
[##......] Chromosome:   4  Mbp:  77.35628  Region Size:  347.154 kb  Num of individuals: 95 
[##......] Before filtering  Num of variants: 567 Num of individuals: 95 
[###.....] After filtering  Num of variants: 100 Num of individuals: 95 
> 
> # For realistic data use the function downloadGeneticMap
> generateUniformGeneticMap()
[1] 0
> 
> startSimulation(vcf, totalNumberOfIndividuals = 200)
[#####...] Creating SIM object
[#####...] Haplodata object created
> 
> ped1 = newNuclearFamily(1)
> 
> v = computePairIBD1(1, 3)
> 
> cat("IBD1 of pair = ", v, "\n");
IBD1 of pair =  1 
> 
> 
> 
> 
> cleanEx()
> nameEx("computePairIBD12")
> ### * computePairIBD12
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: computePairIBD12
> ### Title: Computes pairwise IBD1/2 for a specific pair of individuals
> ### Aliases: computePairIBD12
> 
> ### ** Examples
> 
> 
> library("sim1000G")
> 
> examples_dir = system.file("examples", package = "sim1000G")
> vcf_file = file.path(examples_dir, "region.vcf.gz")
> 
> vcf = readVCF( vcf_file, maxNumberOfVariants = 100 ,
+                min_maf = 0.12 ,max_maf = NA)
[#.......] Reading VCF file..
Parsed with column specification:
cols(
  .default = col_character(),
  `#CHROM` = col_integer(),
  POS = col_integer(),
  QUAL = col_integer()
)
See spec(...) for full column specifications.
[##......] Chromosome:   4  Mbp:  77.35628  Region Size:  347.154 kb  Num of individuals: 95 
[##......] Before filtering  Num of variants: 567 Num of individuals: 95 
[###.....] After filtering  Num of variants: 100 Num of individuals: 95 
> 
> generateUniformGeneticMap()
[1] 0
> 
> startSimulation(vcf, totalNumberOfIndividuals = 200)
[#####...] Creating SIM object
[#####...] Haplodata object created
> 
> ped1 = newNuclearFamily(1)
> 
> v = computePairIBD12(1, 3)
> 
> cat("IBD1 of pair = ", v[1], "\n");
IBD1 of pair =  1 
> cat("IBD2 of pair = ", v[2], "\n");
IBD2 of pair =  0 
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("computePairIBD2")
> ### * computePairIBD2
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: computePairIBD2
> ### Title: Computes pairwise IBD2 for a specific pair of individuals
> ### Aliases: computePairIBD2
> 
> ### ** Examples
> 
> 
> library("sim1000G")
> 
> examples_dir = system.file("examples", package = "sim1000G")
> vcf_file = file.path(examples_dir, "region.vcf.gz")
> vcf = readVCF( vcf_file, maxNumberOfVariants = 100 ,
+                min_maf = 0.12 ,max_maf = NA)
[#.......] Reading VCF file..
Parsed with column specification:
cols(
  .default = col_character(),
  `#CHROM` = col_integer(),
  POS = col_integer(),
  QUAL = col_integer()
)
See spec(...) for full column specifications.
[##......] Chromosome:   4  Mbp:  77.35628  Region Size:  347.154 kb  Num of individuals: 95 
[##......] Before filtering  Num of variants: 567 Num of individuals: 95 
[###.....] After filtering  Num of variants: 100 Num of individuals: 95 
> 
> # For realistic data use the function downloadGeneticMap
> generateUniformGeneticMap()
[1] 0
> 
> startSimulation(vcf, totalNumberOfIndividuals = 200)
[#####...] Creating SIM object
[#####...] Haplodata object created
> 
> ped1 = newNuclearFamily(1)
> 
> v = computePairIBD2(1, 3)
> 
> cat("IBD2 of pair = ", v, "\n");
IBD2 of pair =  0 
> 
> 
> 
> 
> cleanEx()
> nameEx("downloadGeneticMap")
> ### * downloadGeneticMap
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: downloadGeneticMap
> ### Title: Downloads a genetic map for a particular chromosome under GRCh37
> ###   coordinates for use with sim1000G.
> ### Aliases: downloadGeneticMap
> 
> ### ** Examples
> 
> 
> 
> 
> downloadGeneticMap(22, dir=tempdir() )
 -> Downloading genetic map from: https://github.com/adimitromanolakis/geneticMap-GRCh37/raw/master/genetic_map_GRCh37_chr22.txt.gz 
 -> Saving genetic map to:  /tmp/RtmpmldbOk/genetic_map_GRCh37_chr22.txt.gz 
[1] "/tmp/RtmpmldbOk/genetic_map_GRCh37_chr22.txt.gz"
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("generateChromosomeRecombinationPositions")
> ### * generateChromosomeRecombinationPositions
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: generateChromosomeRecombinationPositions
> ### Title: Generates a recombination vector arising from one meiotic event.
> ###   The origin of segments is coded as (0 - haplotype1 , 1 - haplotype2 )
> ### Aliases: generateChromosomeRecombinationPositions
> 
> ### ** Examples
> 
> 
> library("sim1000G")
> 
> # generate a recombination events for chromosome 4
> readGeneticMap(4)
 -> Downloading genetic map from: https://github.com/adimitromanolakis/geneticMap-GRCh37/raw/master/genetic_map_GRCh37_chr4.txt.gz 
 -> Saving genetic map to:  /home/apo/Documents/lunenfeld/sim1000G/..Rcheck/sim1000G/datasets/genetic_map_GRCh37_chr4.txt.gz 
      -> Genetic map has 211115 entries
[1] NA
> generateChromosomeRecombinationPositions(500)
[1]  39.79005  93.17671 177.95551 374.80630 406.99825
> 
> 
> 
> 
> cleanEx()
> nameEx("generateFakeWholeGenomeGeneticMap")
> ### * generateFakeWholeGenomeGeneticMap
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: generateFakeWholeGenomeGeneticMap
> ### Title: Generates a fake genetic map that spans the whole genome.
> ### Aliases: generateFakeWholeGenomeGeneticMap
> 
> ### ** Examples
> 
> 
> library("sim1000G")
> 
> examples_dir = system.file("examples", package = "sim1000G")
> vcf_file = sprintf("%s/region.vcf.gz", examples_dir)
> vcf = readVCF( vcf_file, maxNumberOfVariants = 100 ,
+                min_maf = 0.12 ,max_maf = NA)
[#.......] Reading VCF file..
Parsed with column specification:
cols(
  .default = col_character(),
  `#CHROM` = col_integer(),
  POS = col_integer(),
  QUAL = col_integer()
)
See spec(...) for full column specifications.
[##......] Chromosome:   4  Mbp:  77.35628  Region Size:  347.154 kb  Num of individuals: 95 
[##......] Before filtering  Num of variants: 567 Num of individuals: 95 
[###.....] After filtering  Num of variants: 100 Num of individuals: 95 
> 
> # For realistic data use the function
> # downloadGeneticMap
> generateFakeWholeGenomeGeneticMap(vcf)
[1] 0
> 
> pdf(file=tempfile())
> plotRegionalGeneticMap(seq(1e6,100e6,by=1e6/2))
[1] NA
> dev.off()
pdf 
  2 
> 
> 
> 
> 
> cleanEx()
> nameEx("generateRecombinationDistances")
> ### * generateRecombinationDistances
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: generateRecombinationDistances
> ### Title: Generate inter-recombination distances using a chi-square model.
> ###   Note this are the distances between two succesive recombination
> ###   events and not the absolute positions of the events. To generate the
> ###   locations of the recombination events see the example below.
> ### Aliases: generateRecombinationDistances
> 
> ### ** Examples
> 
> 
> library("sim1000G")
> 
> distances = generateRecombinationDistances(20)
> 
> 
> positions_of_recombination = cumsum(distances)
> 
> if(0) hist(generateRecombinationDistances(20000),n=100)
> 
> 
> 
> 
> cleanEx()
> nameEx("generateRecombinationDistances_noInterference")
> ### * generateRecombinationDistances_noInterference
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: generateRecombinationDistances_noInterference
> ### Title: Generate recombination distances using a no-interference model.
> ### Aliases: generateRecombinationDistances_noInterference
> 
> ### ** Examples
> 
> 
> library("sim1000G")
> mean ( generateRecombinationDistances_noInterference ( 200 ) )
[1] 99.99842
> 
> 
> 
> 
> cleanEx()
> nameEx("generateSingleRecombinationVector")
> ### * generateSingleRecombinationVector
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: generateSingleRecombinationVector
> ### Title: Genetates a recombination vector arising from one meiotic event.
> ###   The origin of segments is coded as (0 - haplotype1 , 1 - haplotype2 )
> ### Aliases: generateSingleRecombinationVector
> 
> ### ** Examples
> 
> 
> library("sim1000G")
> 
> examples_dir = system.file("examples", package = "sim1000G")
> vcf_file = file.path(examples_dir, "region.vcf.gz")
> vcf = readVCF( vcf_file, maxNumberOfVariants = 100 ,
+                min_maf = 0.12 ,max_maf = NA)
[#.......] Reading VCF file..
Parsed with column specification:
cols(
  .default = col_character(),
  `#CHROM` = col_integer(),
  POS = col_integer(),
  QUAL = col_integer()
)
See spec(...) for full column specifications.
[##......] Chromosome:   4  Mbp:  77.35628  Region Size:  347.154 kb  Num of individuals: 95 
[##......] Before filtering  Num of variants: 567 Num of individuals: 95 
[###.....] After filtering  Num of variants: 100 Num of individuals: 95 
> 
> # For realistic data use the function downloadGeneticMap
> generateUniformGeneticMap()
[1] 0
> generateSingleRecombinationVector( 1:100 )
  [1] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 [38] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 [75] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
> 
> 
> 
> 
> cleanEx()
> nameEx("generateUniformGeneticMap")
> ### * generateUniformGeneticMap
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: generateUniformGeneticMap
> ### Title: Generates a uniform genetic map.
> ### Aliases: generateUniformGeneticMap
> 
> ### ** Examples
> 
> 
> library("sim1000G")
> 
> examples_dir = system.file("examples", package = "sim1000G")
> vcf_file = sprintf("%s/region.vcf.gz", examples_dir)
> vcf = readVCF( vcf_file, maxNumberOfVariants = 100 ,
+                min_maf = 0.12 ,max_maf = NA)
[#.......] Reading VCF file..
Parsed with column specification:
cols(
  .default = col_character(),
  `#CHROM` = col_integer(),
  POS = col_integer(),
  QUAL = col_integer()
)
See spec(...) for full column specifications.
[##......] Chromosome:   4  Mbp:  77.35628  Region Size:  347.154 kb  Num of individuals: 95 
[##......] Before filtering  Num of variants: 567 Num of individuals: 95 
[###.....] After filtering  Num of variants: 100 Num of individuals: 95 
> 
> # For realistic data use the function readGeneticMap
> generateUniformGeneticMap()
[1] 0
> 
> pdf(file=tempfile())
> plotRegionalGeneticMap(seq(1e6,100e6,by=1e6/2))
[1] 99
> dev.off()
pdf 
  2 
> 
> 
> 
> 
> cleanEx()
> nameEx("generateUnrelatedIndividuals")
> ### * generateUnrelatedIndividuals
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: generateUnrelatedIndividuals
> ### Title: Generates variant data for n unrelated individuals
> ### Aliases: generateUnrelatedIndividuals
> 
> ### ** Examples
> 
> 
> library("sim1000G")
> 
> examples_dir = system.file("examples", package = "sim1000G")
> vcf_file = file.path(examples_dir, "region.vcf.gz")
> vcf = readVCF( vcf_file, maxNumberOfVariants = 100 , min_maf = 0.12)
[#.......] Reading VCF file..
Parsed with column specification:
cols(
  .default = col_character(),
  `#CHROM` = col_integer(),
  POS = col_integer(),
  QUAL = col_integer()
)
See spec(...) for full column specifications.
[##......] Chromosome:   4  Mbp:  77.35628  Region Size:  347.154 kb  Num of individuals: 95 
[##......] Before filtering  Num of variants: 567 Num of individuals: 95 
[###.....] After filtering  Num of variants: 100 Num of individuals: 95 
> 
> genetic_map_of_region =
+    system.file("examples",
+      "chr4-geneticmap.txt",
+      package = "sim1000G")
> 
> readGeneticMapFromFile(genetic_map_of_region)
      -> Genetic map has 793 entries
[1] NA
> 
> startSimulation(vcf, totalNumberOfIndividuals = 1200)
[#####...] Creating SIM object
[#####...] Haplodata object created
> ids = generateUnrelatedIndividuals(20)
> 
> # See also the documentation on our github page
> 
> 
> 
> 
> cleanEx()
> nameEx("getCMfromBP")
> ### * getCMfromBP
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getCMfromBP
> ### Title: Converts centimorgan position to base-pair. Return a list of
> ###   centimorgan positions that correspond to the bp vector (in
> ###   basepairs).
> ### Aliases: getCMfromBP
> 
> ### ** Examples
> 
> 
> library("sim1000G")
> 
> examples_dir = system.file("examples", package = "sim1000G")
> vcf_file = sprintf("%s/region.vcf.gz", examples_dir)
> vcf = readVCF( vcf_file, maxNumberOfVariants = 100,
+   min_maf = 0.12)
[#.......] Reading VCF file..
Parsed with column specification:
cols(
  .default = col_character(),
  `#CHROM` = col_integer(),
  POS = col_integer(),
  QUAL = col_integer()
)
See spec(...) for full column specifications.
[##......] Chromosome:   4  Mbp:  77.35628  Region Size:  347.154 kb  Num of individuals: 95 
[##......] Before filtering  Num of variants: 567 Num of individuals: 95 
[###.....] After filtering  Num of variants: 100 Num of individuals: 95 
> 
> # For realistic data use the function downloadGeneticMap
> generateUniformGeneticMap()
[1] 0
> getCMfromBP(seq(1e6,100e6,by=1e6))
  [1]   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18
 [19]  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36
 [37]  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53  54
 [55]  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71  72
 [73]  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90
 [91]  91  92  93  94  95  96  97  98  99 100
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("loadSimulation")
> ### * loadSimulation
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: loadSimulation
> ### Title: Load some previously saved simulation data by function
> ###   saveSimulation
> ### Aliases: loadSimulation
> 
> ### ** Examples
> 
> 
> 
> examples_dir = system.file("examples", package = "sim1000G")
> vcf_file = file.path(examples_dir, "region.vcf.gz")
> 
> vcf = readVCF( vcf_file, maxNumberOfVariants = 100 ,
+            min_maf = 0.12 ,max_maf = NA)
[#.......] Reading VCF file..
Parsed with column specification:
cols(
  .default = col_character(),
  `#CHROM` = col_integer(),
  POS = col_integer(),
  QUAL = col_integer()
)
See spec(...) for full column specifications.
[##......] Chromosome:   4  Mbp:  77.35628  Region Size:  347.154 kb  Num of individuals: 95 
[##......] Before filtering  Num of variants: 567 Num of individuals: 95 
[###.....] After filtering  Num of variants: 100 Num of individuals: 95 
> 
> # For a realistic genetic map
> # use the function readGeneticMap
> generateUniformGeneticMap()
[1] 0
> 
> startSimulation(vcf, totalNumberOfIndividuals = 200)
[#####...] Creating SIM object
[#####...] Haplodata object created
> 
> ped1 = newNuclearFamily(1)
> 
> saveSimulation("sim1")
> 
> vcf = readVCF( vcf_file, maxNumberOfVariants = 100 ,
+                min_maf = 0.02 ,max_maf = 0.5)
[#.......] Reading VCF file..
Parsed with column specification:
cols(
  .default = col_character(),
  `#CHROM` = col_integer(),
  POS = col_integer(),
  QUAL = col_integer()
)
See spec(...) for full column specifications.
[##......] Chromosome:   4  Mbp:  77.35628  Region Size:  347.154 kb  Num of individuals: 95 
[##......] Before filtering  Num of variants: 567 Num of individuals: 95 
[###.....] After filtering  Num of variants: 100 Num of individuals: 95 
> 
> startSimulation(vcf, totalNumberOfIndividuals = 200)
[#####...] Creating SIM object
[#####...] Haplodata object created
> saveSimulation("sim2")
> 
> loadSimulation("sim1")
[1] "sim1" "sim2"
 N= 95  individuals in origin simulation pool.
> 
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("newFamily3generations")
> ### * newFamily3generations
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: newFamily3generations
> ### Title: Generates genotype data for a family of 3 generations
> ### Aliases: newFamily3generations
> 
> ### ** Examples
> 
> 
> library("sim1000G")
> 
> examples_dir = system.file("examples", package = "sim1000G")
> vcf_file = file.path(examples_dir, "region.vcf.gz")
> vcf = readVCF( vcf_file, maxNumberOfVariants = 100 ,
+                min_maf = 0.12 ,max_maf = NA)
[#.......] Reading VCF file..
Parsed with column specification:
cols(
  .default = col_character(),
  `#CHROM` = col_integer(),
  POS = col_integer(),
  QUAL = col_integer()
)
See spec(...) for full column specifications.
[##......] Chromosome:   4  Mbp:  77.35628  Region Size:  347.154 kb  Num of individuals: 95 
[##......] Before filtering  Num of variants: 567 Num of individuals: 95 
[###.....] After filtering  Num of variants: 100 Num of individuals: 95 
> 
> generateUniformGeneticMap()
[1] 0
> 
> startSimulation(vcf, totalNumberOfIndividuals = 200)
[#####...] Creating SIM object
[#####...] Haplodata object created
> 
> ped_line = newFamily3generations(12, 3, c(3,3,2) )
> 
> 
> 
> 
> cleanEx()
> nameEx("newFamilyWithOffspring")
> ### * newFamilyWithOffspring
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: newFamilyWithOffspring
> ### Title: Simulates genotypes for 1 family with n offspring
> ### Aliases: newFamilyWithOffspring
> 
> ### ** Examples
> 
> 
> ped_line = newFamilyWithOffspring(10,3)
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("newNuclearFamily")
> ### * newNuclearFamily
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: newNuclearFamily
> ### Title: Simulates genotypes for 1 family with 1 offspring
> ### Aliases: newNuclearFamily
> 
> ### ** Examples
> 
> 
> library("sim1000G")
> 
> examples_dir = system.file("examples", package = "sim1000G")
> vcf_file = file.path(examples_dir, "region.vcf.gz")
> vcf = readVCF( vcf_file, maxNumberOfVariants = 100 ,
+    min_maf = 0.12 ,max_maf = NA)
[#.......] Reading VCF file..
Parsed with column specification:
cols(
  .default = col_character(),
  `#CHROM` = col_integer(),
  POS = col_integer(),
  QUAL = col_integer()
)
See spec(...) for full column specifications.
[##......] Chromosome:   4  Mbp:  77.35628  Region Size:  347.154 kb  Num of individuals: 95 
[##......] Before filtering  Num of variants: 567 Num of individuals: 95 
[###.....] After filtering  Num of variants: 100 Num of individuals: 95 
> 
> genetic_map_of_region = system.file("examples","chr4-geneticmap.txt",
+    package = "sim1000G")
> readGeneticMapFromFile(genetic_map_of_region)
      -> Genetic map has 793 entries
[1] NA
> 
> startSimulation(vcf, totalNumberOfIndividuals = 1200)
[#####...] Creating SIM object
[#####...] Haplodata object created
> fam1 = newNuclearFamily(1)
> fam2 = newNuclearFamily(2)
> 
> # See also the documentation on our github page
> 
> 
> 
> 
> cleanEx()
> nameEx("printMatrix")
> ### * printMatrix
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: printMatrix
> ### Title: Utility function that prints a matrix. Useful for IBD12
> ###   matrices.
> ### Aliases: printMatrix
> 
> ### ** Examples
> 
> 
> printMatrix (  matrix(runif(16), nrow=4) )
         [   1]  [   2]  [   3]  [   4]  
[   1]    0.266   0.202   0.629   0.687  
[   2]    0.372   0.898   0.062   0.384  
[   3]    0.573   0.945   0.206   0.770  
[   4]    0.908   0.661   0.177   0.498  
> 
> 
> 
> cleanEx()
> nameEx("readGeneticMap")
> ### * readGeneticMap
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: readGeneticMap
> ### Title: Reads a genetic map downloaded from the function
> ###   downloadGeneticMap or reads a genetic map from a specified file. If
> ###   the argument filename is used then the genetic map is read from the
> ###   corresponding file. Otherwise, if a chromosome is specified, the
> ###   genetic map is downloaded for human chromosome using grch37
> ###   coordinates.
> ### Aliases: readGeneticMap
> 
> ### ** Examples
> 
> 
> 
> 
> 
> readGeneticMap(chromosome = 22)
 -> Downloading genetic map from: https://github.com/adimitromanolakis/geneticMap-GRCh37/raw/master/genetic_map_GRCh37_chr22.txt.gz 
 -> Saving genetic map to:  /home/apo/Documents/lunenfeld/sim1000G/..Rcheck/sim1000G/datasets/genetic_map_GRCh37_chr22.txt.gz 
      -> Genetic map has 45329 entries
[1] NA
> 
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("readGeneticMapFromFile")
> ### * readGeneticMapFromFile
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: readGeneticMapFromFile
> ### Title: Reads a genetic map to be used for simulations. The genetic map
> ###   should be of a single chromosome and covering the extent of the
> ###   region to be simulated. Whole chromosome genetic maps can also be
> ###   used.
> ### Aliases: readGeneticMapFromFile
> 
> ### ** Examples
> 
> 
> ## Not run: 
> ##D 
> ##D fname = downloadGeneticMap(10)
> ##D 
> ##D cat("genetic map downloaded at :", fname, "\n")
> ##D readGeneticMapFromFile(fname)
> ##D 
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("readVCF")
> ### * readVCF
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: readVCF
> ### Title: Read a vcf file, with options to filter out low or high
> ###   frequency markers.
> ### Aliases: readVCF
> 
> ### ** Examples
> 
> 
> examples_dir = system.file("examples", package = "sim1000G")
> vcf_file = file.path(examples_dir,
+   "region-chr4-93-TMEM156.vcf.gz")
> 
> vcf = readVCF( vcf_file, maxNumberOfVariants = 500 ,
+                min_maf = 0.02 ,max_maf = NA)
[#.......] Reading VCF file..
Parsed with column specification:
cols(
  .default = col_character(),
  `#CHROM` = col_integer(),
  POS = col_integer(),
  QUAL = col_integer()
)
See spec(...) for full column specifications.
[##......] Chromosome:   4  Mbp:  38.96839  Region Size:  65.587 kb  Num of individuals: 267 
[##......] Before filtering  Num of variants: 2102 Num of individuals: 267 
[###.....] After filtering  Num of variants: 322 Num of individuals: 267 
> 
> str(as.list(vcf))
List of 7
 $ total_number_of_variants_within_maf: int 322
 $ maf                                : num [1:322] 0.0262 0.2453 0.0206 0.2472 1 ...
 $ individual_ids                     : chr [1:267] "NA19625" "NA20274" "NA19700" "NA19701" ...
 $ vcf                                :'data.frame':	322 obs. of  9 variables:
  ..$ #CHROM: int [1:322] 4 4 4 4 4 4 4 4 4 4 ...
  ..$ POS   : int [1:322] 38968442 38968444 38969035 38969427 38970425 38971057 38971382 38971766 38972272 38972374 ...
  ..$ ID    : chr [1:322] "rs28663643" "rs7655962" "rs116088704" "rs17508078" ...
  ..$ REF   : chr [1:322] "T" "A" "C" "G" ...
  ..$ ALT   : chr [1:322] "G" "T" "A" "A" ...
  ..$ QUAL  : int [1:322] 100 100 100 100 100 100 100 100 100 100 ...
  ..$ FILTER: chr [1:322] "PASS" "PASS" "PASS" "PASS" ...
  ..$ INFO  : chr [1:322] "AC=14;AF=0.0389377;AN=534;NS=2504;DP=15300;EAS_AF=0;AMR_AF=0.0115;AFR_AF=0.1415;EUR_AF=0;SAS_AF=0;AA=T|||;VT=SNP" "AC=131;AF=0.251198;AN=534;NS=2504;DP=10666;EAS_AF=0.255;AMR_AF=0.2882;AFR_AF=0.2663;EUR_AF=0.2296;SAS_AF=0.2229;AA=A|||;VT=SNP" "AC=11;AF=0.00838658;AN=534;NS=2504;DP=16482;EAS_AF=0;AMR_AF=0.0173;AFR_AF=0.0045;EUR_AF=0.0229;SAS_AF=0.001;AA=C|||;VT=SNP" "AC=132;AF=0.205072;AN=534;NS=2504;DP=16741;EAS_AF=0.1726;AMR_AF=0.1542;AFR_AF=0.1543;EUR_AF=0.2515;SAS_AF=0.2955;AA=G|||;VT=SNP"| __truncated__ ...
  ..$ FORMAT: chr [1:322] "GT" "GT" "GT" "GT" ...
 $ varid                              : chr [1:322] "4 38968442 rs28663643 T G" "4 38968444 rs7655962 A T" "4 38969035 rs116088704 C A" "4 38969427 rs17508078 G A" ...
 $ gt1                                : num [1:322, 1:267] 1 0 0 0 1 1 0 0 1 0 ...
  ..- attr(*, "dimnames")=List of 2
  .. ..$ : NULL
  .. ..$ : chr [1:267] "NA19625" "NA20274" "NA19700" "NA19701" ...
 $ gt2                                : num [1:322, 1:267] 0 0 0 0 1 1 0 0 0 0 ...
  ..- attr(*, "dimnames")=List of 2
  .. ..$ : NULL
  .. ..$ : chr [1:267] "NA19625" "NA20274" "NA19700" "NA19701" ...
> 
> 
> 
> cleanEx()
> nameEx("resetSimulation")
> ### * resetSimulation
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: resetSimulation
> ### Title: Removes all individuals that have been simulated and resets the
> ###   simulator.
> ### Aliases: resetSimulation
> 
> ### ** Examples
> 
> 
> resetSimulation()
> 
> 
> 
> 
> cleanEx()
> nameEx("retrieveGenotypes")
> ### * retrieveGenotypes
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: retrieveGenotypes
> ### Title: Retrieve a matrix of simulated genotypes for a specific set of
> ###   individual IDs
> ### Aliases: retrieveGenotypes
> 
> ### ** Examples
> 
> 
> library("sim1000G")
> 
> examples_dir = system.file("examples", package = "sim1000G")
> vcf_file = file.path(examples_dir, "region.vcf.gz")
> vcf = readVCF( vcf_file, maxNumberOfVariants = 100 ,
+                min_maf = 0.12 ,max_maf = NA)
[#.......] Reading VCF file..
Parsed with column specification:
cols(
  .default = col_character(),
  `#CHROM` = col_integer(),
  POS = col_integer(),
  QUAL = col_integer()
)
See spec(...) for full column specifications.
[##......] Chromosome:   4  Mbp:  77.35628  Region Size:  347.154 kb  Num of individuals: 95 
[##......] Before filtering  Num of variants: 567 Num of individuals: 95 
[###.....] After filtering  Num of variants: 100 Num of individuals: 95 
> 
> # For realistic data use the function downloadGeneticMap
> generateUniformGeneticMap()
[1] 0
> 
> startSimulation(vcf, totalNumberOfIndividuals = 200)
[#####...] Creating SIM object
[#####...] Haplodata object created
> 
> ped1 = newNuclearFamily(1)
> 
> retrieveGenotypes(ped1$gtindex)
  [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13] [,14]
1    0    0    0    0    0    1    1    1    1     1     1     1     1     1
2    0    0    0    0    0    0    0    0    0     0     0     0     0     0
3    0    0    0    0    0    1    1    1    1     1     1     0     0     0
  [,15] [,16] [,17] [,18] [,19] [,20] [,21] [,22] [,23] [,24] [,25] [,26] [,27]
1     1     1     1     1     1     1     0     0     1     1     1     1     0
2     0     0     0     0     0     0     1     1     1     1     1     1     1
3     0     0     0     0     0     0     0     0     2     2     2     2     0
  [,28] [,29] [,30] [,31] [,32] [,33] [,34] [,35] [,36] [,37] [,38] [,39] [,40]
1     0     0     0     0     1     1     1     1     1     1     1     1     0
2     1     0     0     0     1     0     0     0     0     1     1     1     0
3     0     0     0     0     0     0     0     0     0     1     1     1     0
  [,41] [,42] [,43] [,44] [,45] [,46] [,47] [,48] [,49] [,50] [,51] [,52] [,53]
1     1     1     0     1     0     1     0     0     0     1     1     1     1
2     1     2     0     1     0     1     0     0     0     1     1     1     1
3     1     2     0     1     0     1     0     0     0     1     1     1     1
  [,54] [,55] [,56] [,57] [,58] [,59] [,60] [,61] [,62] [,63] [,64] [,65] [,66]
1     1     1     1     1     0     0     0     0     1     0     0     0     0
2     1     1     1     1     0     0     0     0     1     0     0     0     0
3     1     1     1     1     0     0     0     0     1     0     0     0     0
  [,67] [,68] [,69] [,70] [,71] [,72] [,73] [,74] [,75] [,76] [,77] [,78] [,79]
1     1     1     0     0     0     0     0     1     1     0     1     0     1
2     1     1     0     0     0     0     0     1     1     0     1     0     1
3     1     1     0     0     0     0     0     1     1     0     1     0     1
  [,80] [,81] [,82] [,83] [,84] [,85] [,86] [,87] [,88] [,89] [,90] [,91] [,92]
1     1     0     1     0     1     0     0     0     1     1     0     1     1
2     1     0     1     0     1     0     1     0     1     1     0     1     1
3     1     0     1     0     1     0     0     0     1     1     0     1     1
  [,93] [,94] [,95] [,96] [,97] [,98] [,99] [,100]
1     1     1     1     0     0     0     1      0
2     1     1     1     1     0     0     0      0
3     1     1     1     0     0     0     1      0
> 
> 
> 
> 
> cleanEx()
> nameEx("saveSimulation")
> ### * saveSimulation
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: saveSimulation
> ### Title: Save the data for a simulation for later use. When simulating
> ###   multiple populations it allows saving and restoring of simulation
> ###   data for each population.
> ### Aliases: saveSimulation
> 
> ### ** Examples
> 
> 
> 
> 
> examples_dir = system.file("examples", package = "sim1000G")
> 
> vcf_file = file.path(examples_dir, "region.vcf.gz")
> vcf = readVCF( vcf_file, maxNumberOfVariants = 100 ,
+                min_maf = 0.12 ,max_maf = NA)
[#.......] Reading VCF file..
Parsed with column specification:
cols(
  .default = col_character(),
  `#CHROM` = col_integer(),
  POS = col_integer(),
  QUAL = col_integer()
)
See spec(...) for full column specifications.
[##......] Chromosome:   4  Mbp:  77.35628  Region Size:  347.154 kb  Num of individuals: 95 
[##......] Before filtering  Num of variants: 567 Num of individuals: 95 
[###.....] After filtering  Num of variants: 100 Num of individuals: 95 
> 
> 
> # For realistic data use the functions downloadGeneticMap
> generateUniformGeneticMap()
[1] 0
> 
> startSimulation(vcf, totalNumberOfIndividuals = 200)
[#####...] Creating SIM object
[#####...] Haplodata object created
> 
> ped1 = newNuclearFamily(1)
> 
> saveSimulation("sim1")
> 
> 
> 
> 
> cleanEx()
> nameEx("setRecombinationModel")
> ### * setRecombinationModel
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: setRecombinationModel
> ### Title: Set recombination model to either poisson (no interference) or
> ###   chi-square.
> ### Aliases: setRecombinationModel
> 
> ### ** Examples
> 
> 
> 
> generateUniformGeneticMap()
[1] 0
> 
> do_plots = 0
> 
> setRecombinationModel("chisq")
> if(do_plots == 1)
+  hist(generateRecombinationDistances(100000),n=200)
> 
> setRecombinationModel("poisson")
> if(do_plots == 1)
+  hist(generateRecombinationDistances(100000),n=200)
> 
> 
> 
> 
> cleanEx()
> nameEx("startSimulation")
> ### * startSimulation
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: startSimulation
> ### Title: Starts and initializes the data structures required for a
> ###   simulation. A VCF file should be read beforehand with the function
> ###   readVCF.
> ### Aliases: startSimulation
> 
> ### ** Examples
> 
> library("sim1000G")
> library(gplots)

Attaching package: ‘gplots’

The following object is masked from ‘package:stats’:

    lowess

> 
> examples_dir = system.file("examples", package = "sim1000G")
> vcf_file = file.path(examples_dir, "region.vcf.gz")
> 
> vcf = readVCF( vcf_file, maxNumberOfVariants = 100)
[#.......] Reading VCF file..
Parsed with column specification:
cols(
  .default = col_character(),
  `#CHROM` = col_integer(),
  POS = col_integer(),
  QUAL = col_integer()
)
See spec(...) for full column specifications.
[##......] Chromosome:   4  Mbp:  77.35628  Region Size:  347.154 kb  Num of individuals: 95 
[##......] Before filtering  Num of variants: 567 Num of individuals: 95 
[###.....] After filtering  Num of variants: 100 Num of individuals: 95 
> 
> 
> genetic_map_of_region = system.file(
+    "examples",
+    "chr4-geneticmap.txt",
+    package = "sim1000G"
+ )
> 
> readGeneticMapFromFile(genetic_map_of_region)
      -> Genetic map has 793 entries
[1] NA
> 
> pdf(file=tempfile())
> plotRegionalGeneticMap(vcf$vcf[,2]+1)
[1] 0.2624311
> dev.off()
pdf 
  2 
> 
> startSimulation(vcf, totalNumberOfIndividuals = 200)
[#####...] Creating SIM object
[#####...] Haplodata object created
> 
> 
> 
> 
> cleanEx()

detaching ‘package:gplots’

> nameEx("subsetVCF")
> ### * subsetVCF
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: subsetVCF
> ### Title: Generate a market subset of a vcf file
> ### Aliases: subsetVCF
> 
> ### ** Examples
> 
> 
> examples_dir = system.file("examples", package = "sim1000G")
> 
> vcf_file = file.path(examples_dir, "region-chr4-93-TMEM156.vcf.gz")
> 
> vcf = readVCF( vcf_file, maxNumberOfVariants = 500 ,
+                min_maf = 0.02 ,max_maf = NA)
[#.......] Reading VCF file..
Parsed with column specification:
cols(
  .default = col_character(),
  `#CHROM` = col_integer(),
  POS = col_integer(),
  QUAL = col_integer()
)
See spec(...) for full column specifications.
[##......] Chromosome:   4  Mbp:  38.96839  Region Size:  65.587 kb  Num of individuals: 267 
[##......] Before filtering  Num of variants: 2102 Num of individuals: 267 
[###.....] After filtering  Num of variants: 322 Num of individuals: 267 
> 
> vcf2 = subsetVCF(vcf, var_index = 1:50)
> 
> 
> 
> 
> ### * <FOOTER>
> ###
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  9.768 0.076 26.018 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
